(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{512:function(n,r,e){"use strict";e.r(r);var _={head:function(){return{title:"リテラルと変数"}}},t=e(53),component=Object(t.a)(_,(function(){var n=this,r=n.$createElement,e=n._self._c||r;return e("div",[e("Header"),n._v(" "),e("h1",[n._v("リテラルと変数")]),n._v(" "),e("Paragraph",[e("strong",[n._v("リテラル")]),n._v("とは，直値とも言われ，プログラムに直に値を書いたものである。\n    プログラムにおいて，"),e("strong",[n._v("変数")]),n._v("とは値を保存しておくことのできる\n    名前のついた領域のことを指している。\n    保存する値は変更することができる。\n  ")]),n._v(" "),e("Paragraph",[n._v("\n    値の出力については別のページで説明する。\n  ")]),n._v(" "),e("MiniPage",{attrs:{type:"half"}},[e("h2",[n._v("文字")]),n._v(" "),e("Paragraph",[n._v("\n      説明のために，変数を v という名前でつくる。\n      初期値として，アルファベットの L （これをリテラルとする）を与えて変数を作成し，\n      値を表示するプログラムを以下に示す。\n    ")]),n._v(" "),e("Paragraph",[n._v("\n      1 文字を表すリテラルは，シングルクオートで挟み表記する。\n      これは char 型の変数に保存することができる。\n      "),e("Code",{attrs:{language:"c",code:"char v = 'L';"}})],1)],1),n._v(" "),e("MiniPage",{attrs:{type:"half"}},[e("h2",[n._v("文字列")]),n._v(" "),e("Paragraph",[n._v("\n      文字列を表すリテラルは，ダブルクオートで挟み表記する。\n      これは char 型の配列に保存することができる。\n      "),e("Code",{attrs:{language:"c",code:'char str[] = "hello";'}})],1)],1),n._v(" "),e("MiniPage",{attrs:{type:"half"}},[e("h2",[n._v("整数")]),n._v(" "),e("Paragraph",[n._v("\n      クオーテーションを使わず直に整数を書いたものが整数リテラルとなる。\n      整数を表すデータ型は int 型である（他にもある）。\n    ")]),n._v(" "),e("Paragraph",[n._v("\n      負の整数は，整数を表すリテラルに単項演算子 - をつけて表すことができる。\n    ")]),n._v(" "),e("Paragraph",[n._v("\n      正負それぞれのリテラルを使って int 型の変数を初期化する例を以下に示す:\n      "),e("Code",{attrs:{url:"/codes/informatics/lang_c/literal_and_variable/literal_integer_sign.c",language:"c"}})],1),n._v(" "),e("Paragraph",[n._v("\n      精度（桁数）は環境に依存し， 通常は 2 byte もしくは 4 byte である。\n    ")]),n._v(" "),e("Paragraph",[n._v("\n      型修飾子 long を指定することで int 型より表せる数の範囲が広がる（処理系依存）。\n      long int 型と long long int 型を作ることができる。\n      これらに対応するリテラルは整数の末尾に long の数だけ接尾辞 L を付けて表す。\n    ")]),n._v(" "),e("Paragraph",[n._v("\n      型修飾子 unsigned をつけることで正の整数のみを扱うようにでき，表せる桁数を増やすことができる。\n      これに対応するリテラルは整数の末尾にさらに接尾辞 U をつけて表す( L よりも前方に)。\n    ")]),n._v(" "),e("Paragraph",[n._v("\n      型修飾子 long や unsinged を指定した int 型が表せる整数の範囲は，どれも環境依存である。\n    ")]),n._v(" "),e("Paragraph",[n._v("\n      型修飾子を使った変数の初期化の例:\n      "),e("Code",{attrs:{url:"/codes/informatics/lang_c/literal_and_variable/literal_integer.c",language:"c"}})],1)],1),n._v(" "),e("MiniPage",{attrs:{type:"half"}},[e("h2",[n._v("浮動小数点数")]),n._v(" "),e("Paragraph",[n._v("\n      浮動小数点数のリテラルもクオーテーションを使わずに書く。\n      浮動小数点数を表すデータ型には float 型と double 型がある。\n    ")]),n._v(" "),e("Paragraph",[n._v("\n      float 型は 4 byte, double 型は 8 byte を使って数を表す。\n      符号，指数部，仮数部それぞれを表すために何 bit を使うかは処理系によって変わるため，\n      精度は環境に依存する。\n    ")]),n._v(" "),e("Paragraph",[n._v("\n      整数の場合と同じく，リテラルに単項演算子を付けて符号を指示することができる。\n    ")]),n._v(" "),e("Paragraph",[n._v("\n      型修飾子 long を指定することで double 型より表せる数の範囲が広がる（処理系依存）。\n    ")]),n._v(" "),e("Paragraph",[n._v("\n      接尾辞を付けない場合には double, F を付けた場合には float，\n      L を付けた場合には long double としてそれぞれ解釈される。\n    ")]),n._v(" "),e("Paragraph",[e("Code",{attrs:{url:"/codes/informatics/lang_c/literal_and_variable/literal_floating_number.c",language:"c"}})],1),n._v(" "),e("Paragraph",[n._v("\n      指数表記を使ってリテラルを与えることもできる。\n      仮数部と指数部を E で繋げたものがリテラルとなる。\n    ")]),n._v(" "),e("Paragraph",[e("Code",{attrs:{url:"/codes/informatics/lang_c/literal_and_variable/literal_exponential.c",language:"c"}})],1)],1)],1)}),[],!1,null,"183675f1",null);r.default=component.exports}}]);